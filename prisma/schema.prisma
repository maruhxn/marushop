// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String  @unique
  username   String
  password   String?
  googleId   String?
  kakaoId    String?
  isAdmin    Boolean @default(false)
  isVerified Boolean @default(false)

  cartItems CartItem[]
  orders    Order[]
}

model Category {
  id         String     @id @default(uuid())
  title String
  slug  String? @unique

  products Product[]
}

model Product {
  id         String     @id @default(uuid())
  title       String
  slug        String?  @unique
  description String
  price       Int
  stock       Int
  createdAt   DateTime @default(now())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade)

  images Image[]
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([title])
}

model Image {
  id         String     @id @default(uuid())
  imageName String @unique
  imagePath String @unique

  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CartItem {
  quantity Int

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, productId])
}

model Order {
  id         String     @id
  orderDate  DateTime @default(now())
  totalPrice Int
  isPaid     Boolean  @default(false)
  tel String
  address String
  postcode String

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  orderItems OrderItem[]
  payment Payment?

  @@index([userId])
}

model OrderItem {
  quantity Int

  orderId String
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([orderId, productId])
}

model Payment {
  id String @id
  orderId String @unique
  order Order @relation(fields: [orderId], references: [id])
  amount Int @default(0)
  cancel_amount Int @default(0)
}